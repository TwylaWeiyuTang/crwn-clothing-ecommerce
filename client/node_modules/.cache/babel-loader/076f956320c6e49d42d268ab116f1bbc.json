{"ast":null,"code":"var _jsxFileName = \"/Users/twyla/WebDevelopment/crwn-clothing/src/App.js\";\nimport './App.css';\nimport { Route, Routes, Navigate } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport HomepageComponent from './pages/homepage/HomepageComponent';\nimport ShopComponent from './pages/shoppage/ShopComponent';\nimport HeaderComponent from './components/header/HeaderComponent';\nimport SignInandSignUp from './pages/sign-in-and-sign-up/SignInandSignUp';\nimport { auth, createUserProfileDocument } from './firebase/firebaseUtils';\nimport { onAuthStateChanged } from 'firebase/auth';\nimport { onSnapshot } from \"firebase/firestore\";\nimport { setCurrentUser } from './redux/user/userActions';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.unsubscribeFromAuth = null;\n  }\n\n  componentDidMount() {\n    const {\n      setCurrentUser\n    } = this.props;\n    this.unsubscribeFromAuth = onAuthStateChanged(auth, async userAuth => {\n      if (userAuth) {\n        const userRef = await createUserProfileDocument(userAuth);\n        onSnapshot(userRef, doc => {\n          //onSnapshot method is for us to listen to the update of\n          // the user\n          setCurrentUser({\n            id: doc.id,\n            // change the user state to include the id we get from the firebase\n            ...doc.data() // change the user state to include any other user information we get from the doc.data()\n\n          });\n        });\n      }\n\n      setCurrentUser(userAuth); // if the userAuth does not exist (false), then set\n      // our user state to null\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth(); // close the subscription to the Firebase user management\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(HeaderComponent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(HomepageComponent, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 44\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/shop\",\n          element: /*#__PURE__*/_jsxDEV(ShopComponent, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/signin\",\n          element: this.props.currentUser ? /*#__PURE__*/_jsxDEV(Navigate, {\n            replace: true,\n            to: \"/\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 69\n          }, this) : /*#__PURE__*/_jsxDEV(SignInandSignUp, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 101\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = _ref => {\n  let {\n    user\n  } = _ref;\n  return {\n    currentUser: user.currentUser\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  setCurrentUser: user => dispatch(setCurrentUser(user)) // set the user payload by using dispatch function\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App); // we pass in mapStateToProps, mapDispatchToProps so we can have access to this.state.currentUser\n// and this.props.setCurrentUser","map":{"version":3,"sources":["/Users/twyla/WebDevelopment/crwn-clothing/src/App.js"],"names":["Route","Routes","Navigate","connect","HomepageComponent","ShopComponent","HeaderComponent","SignInandSignUp","auth","createUserProfileDocument","onAuthStateChanged","onSnapshot","setCurrentUser","React","App","Component","unsubscribeFromAuth","componentDidMount","props","userAuth","userRef","doc","id","data","componentWillUnmount","render","currentUser","mapStateToProps","user","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAO,WAAP;AACA,SAASA,KAAT,EAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,kBAAxC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,iBAAP,MAA8B,oCAA9B;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,eAAP,MAA4B,qCAA5B;AACA,OAAOC,eAAP,MAA4B,6CAA5B;AACA,SAASC,IAAT,EAAeC,yBAAf,QAAgD,0BAAhD;AACA,SAASC,kBAAT,QAAmC,eAAnC;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAAQC,cAAR,QAA6B,0BAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,GAAN,SAAkBD,KAAK,CAACE,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAEhCC,mBAFgC,GAEV,IAFU;AAAA;;AAIhCC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAACL,MAAAA;AAAD,QAAmB,KAAKM,KAA9B;AAEA,SAAKF,mBAAL,GAA2BN,kBAAkB,CAACF,IAAD,EAAO,MAAMW,QAAN,IAAmB;AACrE,UAAIA,QAAJ,EAAc;AACZ,cAAMC,OAAO,GAAG,MAAMX,yBAAyB,CAACU,QAAD,CAA/C;AAEAR,QAAAA,UAAU,CAACS,OAAD,EAAWC,GAAD,IAAS;AAAE;AAC7B;AACAT,UAAAA,cAAc,CAAC;AACXU,YAAAA,EAAE,EAAED,GAAG,CAACC,EADG;AACC;AACZ,eAAGD,GAAG,CAACE,IAAJ,EAFQ,CAEG;;AAFH,WAAD,CAAd;AAID,SANS,CAAV;AAOD;;AACDX,MAAAA,cAAc,CAACO,QAAD,CAAd,CAZqE,CAY5C;AACzB;AAED,KAf4C,CAA7C;AAgBD;;AAEDK,EAAAA,oBAAoB,GAAG;AACrB,SAAKR,mBAAL,GADqB,CACO;AAC7B;;AAEDS,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,MAAD;AAAA,gCACE,QAAC,KAAD;AAAO,UAAA,KAAK,MAAZ;AAAa,UAAA,IAAI,EAAC,GAAlB;AAAsB,UAAA,OAAO,eAAI,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAjC;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,OAAZ;AAAoB,UAAA,OAAO,eAAI,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAA/B;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,SAAZ;AAAsB,UAAA,OAAO,EAAG,KAAKP,KAAL,CAAWQ,WAAX,gBAA0B,QAAC,QAAD;AAAU,YAAA,OAAO,MAAjB;AAAkB,YAAA,EAAE,EAAC;AAArB;AAAA;AAAA;AAAA;AAAA,kBAA1B,gBAA0D,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAA1F;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAYD;;AA1C+B;;AA6ClC,MAAMC,eAAe,GAAG;AAAA,MAAC;AAACC,IAAAA;AAAD,GAAD;AAAA,SAAa;AACnCF,IAAAA,WAAW,EAAEE,IAAI,CAACF;AADiB,GAAb;AAAA,CAAxB;;AAIA,MAAMG,kBAAkB,GAAGC,QAAQ,KAAM;AACvClB,EAAAA,cAAc,EAAEgB,IAAI,IAAIE,QAAQ,CAAClB,cAAc,CAACgB,IAAD,CAAf,CADO,CACgB;;AADhB,CAAN,CAAnC;;AAIA,eAAezB,OAAO,CAACwB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6Cf,GAA7C,CAAf,C,CACA;AACA","sourcesContent":["import './App.css';\nimport { Route, Routes, Navigate } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport HomepageComponent from './pages/homepage/HomepageComponent';\nimport ShopComponent from './pages/shoppage/ShopComponent';\nimport HeaderComponent from './components/header/HeaderComponent';\nimport SignInandSignUp from './pages/sign-in-and-sign-up/SignInandSignUp';\nimport { auth, createUserProfileDocument } from './firebase/firebaseUtils';\nimport { onAuthStateChanged } from 'firebase/auth';\nimport { onSnapshot } from \"firebase/firestore\";\nimport {setCurrentUser} from './redux/user/userActions'\nimport React from 'react';\n\nclass App extends React.Component {\n\n  unsubscribeFromAuth = null\n\n  componentDidMount() {\n    const {setCurrentUser} = this.props\n\n    this.unsubscribeFromAuth = onAuthStateChanged(auth, async(userAuth) => {\n      if (userAuth) {\n        const userRef = await createUserProfileDocument(userAuth)\n\n        onSnapshot(userRef, (doc) => { //onSnapshot method is for us to listen to the update of\n          // the user\n          setCurrentUser({\n              id: doc.id, // change the user state to include the id we get from the firebase\n              ...doc.data() // change the user state to include any other user information we get from the doc.data()\n          })\n        })\n      }\n      setCurrentUser(userAuth) // if the userAuth does not exist (false), then set\n      // our user state to null\n\n    })\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth(); // close the subscription to the Firebase user management\n  }\n\n  render() {\n    return (\n      <div>\n        <HeaderComponent />\n        <Routes>\n          <Route exact path='/' element = {<HomepageComponent />} />\n          <Route path='/shop' element = {<ShopComponent />} />\n          <Route path='/signin' element= {this.props.currentUser ? (<Navigate replace to='/' />) : (<SignInandSignUp />)} />\n          {/* if there is a signed in user, then redirect them to Homepage,\n          otherwise go to sign in and sign up page */}\n        </Routes>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({user}) => ({\n  currentUser: user.currentUser\n})\n\nconst mapDispatchToProps = dispatch  => ({\n  setCurrentUser: user => dispatch(setCurrentUser(user)) // set the user payload by using dispatch function\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n// we pass in mapStateToProps, mapDispatchToProps so we can have access to this.state.currentUser\n// and this.props.setCurrentUser\n"]},"metadata":{},"sourceType":"module"}