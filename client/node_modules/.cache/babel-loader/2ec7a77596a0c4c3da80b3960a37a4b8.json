{"ast":null,"code":"import { createStore, applyMiddleware } from \"redux\";\nimport logger from 'redux-logger';\nimport { persistStore } from 'redux-persist';\nimport thunk from 'redux-thunk'; // this allows our browser to cache our store\n\nimport rootReducer from \"./rootReducer\";\nconst middlewares = [thunk];\n\nif (process.env.NODE_ENV === 'development') {\n  middlewares.push(logger);\n}\n\nconst store = createStore(rootReducer, applyMiddleware(...middlewares)); // applyMiddleware(...middlewares) will spread in all of the values in the middlewares array into\n// this function call as individual arguments. In this way, if we ever need to add more things to\n// the middleware, we can just add it to this array\n\nexport const persistor = persistStore(store); //creating a persisted version of the store\n\nexport default store;","map":{"version":3,"sources":["/Users/twyla/WebDevelopment/crwn-clothing/client/src/redux/store.js"],"names":["createStore","applyMiddleware","logger","persistStore","thunk","rootReducer","middlewares","process","env","NODE_ENV","push","store","persistor"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAAUC,YAAV,QAA8B,eAA9B;AACA,OAAOC,KAAP,MAAkB,aAAlB,C,CACA;;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,MAAMC,WAAW,GAAG,CAACF,KAAD,CAApB;;AAEA,IAAIG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AACxCH,EAAAA,WAAW,CAACI,IAAZ,CAAiBR,MAAjB;AACH;;AAED,MAAMS,KAAK,GAAGX,WAAW,CAACK,WAAD,EAAcJ,eAAe,CAAC,GAAGK,WAAJ,CAA7B,CAAzB,C,CACA;AACA;AACA;;AACA,OAAO,MAAMM,SAAS,GAAGT,YAAY,CAACQ,KAAD,CAA9B,C,CAAsC;;AAE7C,eAAeA,KAAf","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport logger from 'redux-logger';\nimport  { persistStore } from 'redux-persist'\nimport thunk from 'redux-thunk'\n// this allows our browser to cache our store\n\nimport rootReducer from \"./rootReducer\";\n\nconst middlewares = [thunk];\n\nif (process.env.NODE_ENV === 'development') {\n    middlewares.push(logger)\n}\n\nconst store = createStore(rootReducer, applyMiddleware(...middlewares))\n// applyMiddleware(...middlewares) will spread in all of the values in the middlewares array into\n// this function call as individual arguments. In this way, if we ever need to add more things to\n// the middleware, we can just add it to this array\nexport const persistor = persistStore(store) //creating a persisted version of the store\n\nexport default store"]},"metadata":{},"sourceType":"module"}