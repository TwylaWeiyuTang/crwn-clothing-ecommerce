{"ast":null,"code":"var _jsxFileName = \"/Users/twyla/WebDevelopment/crwn-clothing/src/pages/shoppage/ShopComponent.js\";\nimport React from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport CollectionsOverview from '../../components/collections-overview/CollectionsOverview';\nimport CollectionComponent from '../collections/CollectionPageComponent';\nimport { db, convertCollectionsSnapshotToMap } from '../../firebase/firebaseUtils';\nimport { onSnapshot, collection } from 'firebase/firestore';\nimport { connect } from 'react-redux';\nimport { updateCollections } from '../../redux/shop/shopActions';\nimport WithSpinner from '../../components/with-spinner/WithSpinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ShopComponent extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      loading: true\n    };\n    this.unsubscribeFromSnapshot = null;\n  }\n\n  // the snapshot is going to be the represent of our collections\n  // data from firestore\n  componentDidMount() {\n    const {\n      updateCollections\n    } = this.props;\n    const collectionRef = collection(db, 'collections');\n    const map = new Map([collectionRef]);\n    console.log(typeof map); // collectionRef.get().then(snapshot => {\n    //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot)\n    //     updateCollections(collectionsMap)\n    //     this.setState({loading : false})\n    // })\n    // this.unsubscribeFromSnapshot = onSnapshot(collectionRef, async (doc) => {\n    //     const collectionsMap = convertCollectionsSnapshotToMap(doc)\n    //     updateCollections(collectionsMap)\n    //     this.setState({loading: false})\n    // })\n  }\n\n  render() {\n    const {\n      loading\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shop-page\",\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: loading ? /*#__PURE__*/_jsxDEV(WithSpinner, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 55\n          }, this) : /*#__PURE__*/_jsxDEV(CollectionsOverview, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 74\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \":collectionId\",\n          element: loading ? /*#__PURE__*/_jsxDEV(WithSpinner, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 65\n          }, this) : /*#__PURE__*/_jsxDEV(CollectionComponent, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 85\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopComponent);","map":{"version":3,"sources":["/Users/twyla/WebDevelopment/crwn-clothing/src/pages/shoppage/ShopComponent.js"],"names":["React","Routes","Route","CollectionsOverview","CollectionComponent","db","convertCollectionsSnapshotToMap","onSnapshot","collection","connect","updateCollections","WithSpinner","ShopComponent","Component","state","loading","unsubscribeFromSnapshot","componentDidMount","props","collectionRef","map","Map","console","log","render","mapDispatchToProps","dispatch","collectionsMap"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,kBAA9B;AACA,OAAOC,mBAAP,MAAgC,2DAAhC;AACA,OAAOC,mBAAP,MAAgC,wCAAhC;AACA,SAASC,EAAT,EAAaC,+BAAb,QAAoD,8BAApD;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,oBAAvC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,OAAOC,WAAP,MAAwB,2CAAxB;;;AAEA,MAAMC,aAAN,SAA4BZ,KAAK,CAACa,SAAlC,CAA4C;AAAA;AAAA;AAAA,SACxCC,KADwC,GAChC;AACJC,MAAAA,OAAO,EAAE;AADL,KADgC;AAAA,SAKxCC,uBALwC,GAKd,IALc;AAAA;;AAKT;AAC/B;AAEAC,EAAAA,iBAAiB,GAAG;AAChB,UAAM;AAACP,MAAAA;AAAD,QAAsB,KAAKQ,KAAjC;AACA,UAAMC,aAAa,GAAGX,UAAU,CAACH,EAAD,EAAK,aAAL,CAAhC;AACA,UAAMe,GAAG,GAAG,IAAIC,GAAJ,CAAQ,CAACF,aAAD,CAAR,CAAZ;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAOH,GAAnB,EAJgB,CAKhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AACDI,EAAAA,MAAM,GAAI;AACN,UAAM;AAACT,MAAAA;AAAD,QAAY,KAAKD,KAAvB;AACA,wBACA;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACI,QAAC,MAAD;AAAA,gCACI,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,GAAZ;AAAgB,UAAA,OAAO,EAAIC,OAAO,gBAAI,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,kBAAJ,gBAAuB,QAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAzD;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,eAAZ;AAA4B,UAAA,OAAO,EAAEA,OAAO,gBAAI,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,kBAAJ,gBAAwB,QAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAApE;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADA;AAWH;;AArCuC;;AAwC5C,MAAMU,kBAAkB,GAAGC,QAAQ,KAAK;AACpChB,EAAAA,iBAAiB,EAAEiB,cAAc,IAAID,QAAQ,CAAChB,iBAAiB,CAACiB,cAAD,CAAlB;AADT,CAAL,CAAnC;;AAIA,eAAelB,OAAO,CAAE,IAAF,EAAQgB,kBAAR,CAAP,CAAoCb,aAApC,CAAf","sourcesContent":["import React from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport CollectionsOverview from '../../components/collections-overview/CollectionsOverview';\nimport CollectionComponent from '../collections/CollectionPageComponent';\nimport { db, convertCollectionsSnapshotToMap } from '../../firebase/firebaseUtils';\nimport { onSnapshot, collection } from 'firebase/firestore';\nimport { connect } from 'react-redux';\nimport { updateCollections } from '../../redux/shop/shopActions';\nimport WithSpinner from '../../components/with-spinner/WithSpinner';\n\nclass ShopComponent extends React.Component {\n    state = {\n        loading: true\n    } // this is the same as writing constructor\n\n    unsubscribeFromSnapshot = null // the snapshot is going to be the represent of our collections\n    // data from firestore\n\n    componentDidMount() {\n        const {updateCollections} = this.props\n        const collectionRef = collection(db, 'collections')\n        const map = new Map([collectionRef])\n        console.log(typeof map)\n        // collectionRef.get().then(snapshot => {\n        //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot)\n        //     updateCollections(collectionsMap)\n        //     this.setState({loading : false})\n        // })\n        // this.unsubscribeFromSnapshot = onSnapshot(collectionRef, async (doc) => {\n        //     const collectionsMap = convertCollectionsSnapshotToMap(doc)\n        //     updateCollections(collectionsMap)\n        //     this.setState({loading: false})\n        // })\n    }\n    render () {\n        const {loading} = this.state\n        return (\n        <div className='shop-page'>\n            <Routes>\n                <Route path='/' element = {loading ? (<WithSpinner />): (<CollectionsOverview />)} />\n                {/* since we are in shop component, React router already knows we are in /shop router,\n                so we just need to use '/' to specify the route we are in now */}\n                <Route path=':collectionId' element={loading ? (<WithSpinner />) : (<CollectionComponent />)} />\n                {/* this is like '/shop/:collectionId */}\n            </Routes>\n        </div>\n        )\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n})\n\nexport default connect (null, mapDispatchToProps) (ShopComponent)"]},"metadata":{},"sourceType":"module"}