{"ast":null,"code":"var _jsxFileName = \"/Users/twyla/WebDevelopment/crwn-clothing/src/App.js\";\nimport './App.css';\nimport { Route, Routes, Navigate } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport HomepageComponent from './pages/homepage/HomepageComponent';\nimport ShopComponent from './pages/shoppage/ShopComponent';\nimport HeaderComponent from './components/header/HeaderComponent';\nimport SignInandSignUp from './pages/sign-in-and-sign-up/SignInandSignUp';\nimport CheckoutComponent from './pages/checkout/CheckoutComponent';\nimport { auth, createUserProfileDocument, addCollectionAndDocuments } from './firebase/firebaseUtils';\nimport { onAuthStateChanged } from 'firebase/auth';\nimport { onSnapshot } from \"firebase/firestore\";\nimport { setCurrentUser } from './redux/user/userActions';\nimport { selectCurrentUser } from './redux/user/userSelectors';\nimport { selectCollectionsForPreview } from './redux/shop/shopSelectors';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.unsubscribeFromAuth = null;\n  }\n\n  componentDidMount() {\n    const {\n      setCurrentUser,\n      collectionsArray\n    } = this.props;\n    this.unsubscribeFromAuth = onAuthStateChanged(auth, async userAuth => {\n      if (userAuth) {\n        const userRef = await createUserProfileDocument(userAuth);\n        onSnapshot(userRef, doc => {\n          //onSnapshot method is for us to listen to the update of\n          // the user\n          setCurrentUser({\n            id: doc.id,\n            // change the user state to include the id we get from the firebase\n            ...doc.data() // change the user state to include any other user information we get from the doc.data()\n\n          });\n        });\n      }\n\n      setCurrentUser(userAuth); // if the userAuth does not exist (false), then set\n      // our user state to null\n\n      addCollectionAndDocuments('collections', collectionsArray.map(_ref => {\n        let {\n          title,\n          items\n        } = _ref;\n        return {\n          title,\n          items\n        };\n      }));\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth(); // close the subscription to the Firebase user management\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(HeaderComponent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(HomepageComponent, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 44\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/shop/*\",\n          element: /*#__PURE__*/_jsxDEV(ShopComponent, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 44\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/checkout\",\n          element: /*#__PURE__*/_jsxDEV(CheckoutComponent, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 52\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/signin\",\n          element: this.props.currentUser ? /*#__PURE__*/_jsxDEV(Navigate, {\n            replace: true,\n            to: \"/\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 69\n          }, this) : /*#__PURE__*/_jsxDEV(SignInandSignUp, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 101\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser,\n  collectionsArray: selectCollectionsForPreview\n}); // we use createStructuredSelector, so we don't need to pass in (state) to different selectors each\n// every time when we have a new selector being mapped here\n\nconst mapDispatchToProps = dispatch => ({\n  setCurrentUser: user => dispatch(setCurrentUser(user)) // set the user payload by using dispatch function\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App); // we pass in mapStateToProps, mapDispatchToProps so we can have access to this.state.currentUser\n// and this.props.setCurrentUser","map":{"version":3,"sources":["/Users/twyla/WebDevelopment/crwn-clothing/src/App.js"],"names":["Route","Routes","Navigate","connect","createStructuredSelector","HomepageComponent","ShopComponent","HeaderComponent","SignInandSignUp","CheckoutComponent","auth","createUserProfileDocument","addCollectionAndDocuments","onAuthStateChanged","onSnapshot","setCurrentUser","selectCurrentUser","selectCollectionsForPreview","React","App","Component","unsubscribeFromAuth","componentDidMount","collectionsArray","props","userAuth","userRef","doc","id","data","map","title","items","componentWillUnmount","render","currentUser","mapStateToProps","mapDispatchToProps","dispatch","user"],"mappings":"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","sourcesContent":["import './App.css';\nimport { Route, Routes, Navigate } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport HomepageComponent from './pages/homepage/HomepageComponent';\nimport ShopComponent from './pages/shoppage/ShopComponent';\nimport HeaderComponent from './components/header/HeaderComponent';\nimport SignInandSignUp from './pages/sign-in-and-sign-up/SignInandSignUp';\nimport CheckoutComponent from './pages/checkout/CheckoutComponent';\nimport { auth, createUserProfileDocument, addCollectionAndDocuments } from './firebase/firebaseUtils';\nimport { onAuthStateChanged } from 'firebase/auth';\nimport { onSnapshot } from \"firebase/firestore\";\nimport {setCurrentUser} from './redux/user/userActions'\nimport { selectCurrentUser } from './redux/user/userSelectors';\nimport { selectCollectionsForPreview } from './redux/shop/shopSelectors';\nimport React from 'react';\n\nclass App extends React.Component {\n\n  unsubscribeFromAuth = null\n\n  componentDidMount() {\n    const {setCurrentUser, collectionsArray} = this.props\n\n    this.unsubscribeFromAuth = onAuthStateChanged(auth, async(userAuth) => {\n      if (userAuth) {\n        const userRef = await createUserProfileDocument(userAuth)\n\n        onSnapshot(userRef, (doc) => { //onSnapshot method is for us to listen to the update of\n          // the user\n          setCurrentUser({\n              id: doc.id, // change the user state to include the id we get from the firebase\n              ...doc.data() // change the user state to include any other user information we get from the doc.data()\n          })\n        })\n      }\n      setCurrentUser(userAuth) // if the userAuth does not exist (false), then set\n      // our user state to null\n      addCollectionAndDocuments('collections', collectionsArray.map(({title, items}) => ({title, items})))\n\n    })\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth(); // close the subscription to the Firebase user management\n  }\n\n  render() {\n    return (\n      <div>\n        <HeaderComponent />\n        <Routes>\n          <Route exact path='/' element = {<HomepageComponent />} />\n          <Route path='/shop/*' element = {<ShopComponent />} />\n          {/* By appending a /* to the end of our /shop path, we're essentially telling \n          React Router that Shop has a nested Routes component and our parent path should match \n          for /shop as well as any other location that matches the /shop/* pattern */}\n          <Route exact path='/checkout' element = {<CheckoutComponent />} />\n          <Route path='/signin' element= {this.props.currentUser ? (<Navigate replace to='/' />) : (<SignInandSignUp />)} />\n          {/* if there is a signed in user, then redirect them to Homepage,\n          otherwise go to sign in and sign up page */}\n        </Routes>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser,\n  collectionsArray: selectCollectionsForPreview\n})\n// we use createStructuredSelector, so we don't need to pass in (state) to different selectors each\n// every time when we have a new selector being mapped here\n\nconst mapDispatchToProps = dispatch  => ({\n  setCurrentUser: user => dispatch(setCurrentUser(user)) // set the user payload by using dispatch function\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n// we pass in mapStateToProps, mapDispatchToProps so we can have access to this.state.currentUser\n// and this.props.setCurrentUser\n"]},"metadata":{},"sourceType":"module"}