{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { addDoc, collection, getFirestore, query, writeBatch } from \"firebase/firestore\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport { doc, getDoc, setDoc } from \"firebase/firestore\"; // TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBjxpRqN3ixOjwZ7KXfRyoiJXj_hZPHoI4\",\n  authDomain: \"crwn-db-f5260.firebaseapp.com\",\n  projectId: \"crwn-db-f5260\",\n  storageBucket: \"crwn-db-f5260.appspot.com\",\n  messagingSenderId: \"527934674908\",\n  appId: \"1:527934674908:web:54e66f9087dd8cbb33a119\",\n  measurementId: \"G-73LN0WZTYJ\"\n}; // Initialize Firebase\n\nconst app = initializeApp(firebaseConfig); // Initialize Cloud Firestore through Firebase\n\nexport const db = getFirestore(app);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return; // if there is no userAuth (user is not signed in), return nothing\n\n  const docRef = doc(db, `users/${userAuth.uid}`);\n  const docSnap = await getDoc(docRef);\n\n  if (!docSnap.exists()) {\n    // if the user id does not exist in our database, then we create one \n    // document for that relative user\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date(); // the first time the user logged in\n\n    try {\n      await setDoc(docRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return docRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = collection(db, `${collectionKey}`); // create an collection reference by passing in the key value\n  // here it's the name of the collectionsa\n\n  console.log(collectionRef);\n  const batch = writeBatch(db); // execute multiple write operations as a single batch\n  // so if the write successful, it means all the documents are added, if it fails, then \n  // everything fails together\n  // did not use batch write here, because if we want to use batch write, we need the document\n  // reference that already exists\n  // but below we are initiating our document reference for the first time\n\n  objectsToAdd.forEach(async obj => {\n    const newDocRef = await addDoc(collection(db, `${collectionKey}`), {\n      obj\n    }); // create document reference with auto-generated id, by using addDoc() and collection name\n    // witout setting any real data \n  });\n}; // create a new collection by passing in an relevant key and objects for the key\n\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data()[\"obj\"];\n    return {\n      routeName: encodeURI(title),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  console.log(transformedCollection);\n}; // fetching the collections data from firestore\n\nconst provider = new GoogleAuthProvider();\nexport const auth = getAuth();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => signInWithPopup(auth, provider); //  prompt users to sign in with their Google Accounts by opening a pop-up window","map":{"version":3,"sources":["/Users/twyla/WebDevelopment/crwn-clothing/src/firebase/firebaseUtils.js"],"names":["initializeApp","addDoc","collection","getFirestore","query","writeBatch","getAuth","signInWithPopup","GoogleAuthProvider","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","db","createUserProfileDocument","userAuth","additionalData","docRef","uid","docSnap","exists","displayName","email","createdAt","Date","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","batch","forEach","obj","newDocRef","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","id","provider","auth","setCustomParameters","prompt","signInWithGoogle"],"mappings":"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","sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { addDoc, collection, getFirestore, query, writeBatch } from \"firebase/firestore\"\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport { doc, getDoc, setDoc } from \"firebase/firestore\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBjxpRqN3ixOjwZ7KXfRyoiJXj_hZPHoI4\",\n  authDomain: \"crwn-db-f5260.firebaseapp.com\",\n  projectId: \"crwn-db-f5260\",\n  storageBucket: \"crwn-db-f5260.appspot.com\",\n  messagingSenderId: \"527934674908\",\n  appId: \"1:527934674908:web:54e66f9087dd8cbb33a119\",\n  measurementId: \"G-73LN0WZTYJ\"\n};\n\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Initialize Cloud Firestore through Firebase\nexport const db = getFirestore(app);\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n    if (!userAuth) return; // if there is no userAuth (user is not signed in), return nothing\n\n    const docRef = doc(db, `users/${userAuth.uid}`);\n    const docSnap = await getDoc(docRef);\n\n    if (!docSnap.exists()) { // if the user id does not exist in our database, then we create one \n        // document for that relative user\n        const {displayName, email} = userAuth\n        const createdAt = new Date() // the first time the user logged in\n\n        try {\n            await setDoc(docRef, {\n                displayName,\n                email,\n                createdAt,\n                ...additionalData\n            })\n        } catch (error) {\n            console.log('error creating user', error.message)\n        }\n    }\n\n    return docRef\n}\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n    const collectionRef = collection(db, `${collectionKey}`)\n    // create an collection reference by passing in the key value\n    // here it's the name of the collectionsa\n    console.log(collectionRef)\n\n    const batch = writeBatch(db) // execute multiple write operations as a single batch\n    // so if the write successful, it means all the documents are added, if it fails, then \n    // everything fails together\n\n    // did not use batch write here, because if we want to use batch write, we need the document\n    // reference that already exists\n    // but below we are initiating our document reference for the first time\n    \n    objectsToAdd.forEach(async obj => {\n        const newDocRef = await addDoc(collection(db, `${collectionKey}`), {obj})\n        // create document reference with auto-generated id, by using addDoc() and collection name\n        // witout setting any real data \n    })\n\n    \n\n} // create a new collection by passing in an relevant key and objects for the key\n\nexport const convertCollectionsSnapshotToMap = (collections) => {\n    const transformedCollection = collections.docs.map( doc => {\n        const {title, items} = doc.data()[\"obj\"]\n        return {\n            routeName: encodeURI(title),\n            id: doc.id,\n            title,\n            items\n        }\n    })\n\n    console.log(transformedCollection)\n} // fetching the collections data from firestore\n\nconst provider = new GoogleAuthProvider();\nexport const auth = getAuth();\n\nprovider.setCustomParameters({prompt: 'select_account'});\nexport const signInWithGoogle = () => signInWithPopup(auth, provider);\n//  prompt users to sign in with their Google Accounts by opening a pop-up window "]},"metadata":{},"sourceType":"module"}