{"version":3,"file":"static/js/831.1419faf3.chunk.js","mappings":"sQAEaA,EAAoB,SAACC,GAAD,MAAqB,CAClDC,KAAMC,EAAAA,EAAAA,mBACNC,QAASH,I,mBCIPI,GAAsBC,EAAAA,EAAAA,OAAK,kBAAM,wDACjCC,GAAsBD,EAAAA,EAAAA,OAAK,kBAAM,wDAqCvC,EAnCsB,WAClB,OAA8BE,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACMC,GAAWC,EAAAA,EAAAA,MAgBb,OAdJC,EAAAA,EAAAA,YAAU,WACN,IAAMC,GAAgBC,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,eAE/BC,GAA6BC,EAAAA,EAAAA,IAAWJ,EAAD,mCAAgB,WAAOK,GAAP,uEACnDlB,GAAiBmB,EAAAA,EAAAA,IAAgCD,GACvDR,EAASX,EAAkBC,IAC3BS,GAAW,GAH8C,2CAAhB,uDAM7C,OAAO,WACHO,OAEL,CAACN,KAGA,gBAAKU,UAAU,YAAf,UACI,SAAC,EAAAC,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,IAApB,UACA,UAAC,KAAD,YACI,SAAC,KAAD,CAAOC,KAAK,IAAIC,QAAWjB,GAAW,SAACe,EAAA,EAAD,KAAmB,SAACnB,EAAD,OAGzD,SAAC,KAAD,CAAOoB,KAAK,gBAAgBC,QAASjB,GAAW,SAACe,EAAA,EAAD,KAAoB,SAACjB,EAAD","sources":["redux/shop/shopActions.js","pages/shoppage/ShopComponent.js"],"sourcesContent":["import ShopActionTypes from \"./shopTypes\";\n\nexport const updateCollections = (collectionsMap) => ({\n    type: ShopActionTypes.UPDATE_COLLECTIONS,\n    payload: collectionsMap\n})","import {useEffect, useState, lazy, Suspense} from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport { db, convertCollectionsSnapshotToMap } from '../../firebase/firebaseUtils';\nimport { onSnapshot, collection } from 'firebase/firestore';\nimport { useDispatch } from 'react-redux';\nimport { updateCollections } from '../../redux/shop/shopActions';\nimport WithSpinner from '../../components/with-spinner/WithSpinner';\n\nconst CollectionsOverview = lazy(() => import ('../../components/collections-overview/CollectionsOverview'))\nconst CollectionComponent = lazy(() => import ('../collections/CollectionPageComponent'))\n\nconst ShopComponent = () => {\n    const [loading, setLoading] = useState(true)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        const collectionRef = collection(db, 'collections')\n       \n        const unsubscribeFromCollections = onSnapshot(collectionRef, async (doc) => {\n            const collectionsMap = convertCollectionsSnapshotToMap(doc)\n            dispatch(updateCollections(collectionsMap))\n            setLoading(false)\n        })\n\n        return () => {\n            unsubscribeFromCollections()\n        } // clean up from the useEffect, this is like componentWillUnmount\n    }, [dispatch])\n \n        return (\n        <div className='shop-page'>\n            <Suspense fallback={<WithSpinner />}>\n            <Routes>\n                <Route path='/' element = {loading ? (<WithSpinner />): (<CollectionsOverview />)} />\n                {/* since we are in shop component, React router already knows we are in /shop router,\n                so we just need to use '/' to specify the route we are in now */}\n                <Route path=':collectionId' element={loading ? (<WithSpinner />) : (<CollectionComponent />)} />\n                {/* this is like '/shop/:collectionId */}\n            </Routes>\n            </Suspense>\n        </div>\n        )\n    }\n\n\n\nexport default ShopComponent"],"names":["updateCollections","collectionsMap","type","ShopActionTypes","payload","CollectionsOverview","lazy","CollectionComponent","useState","loading","setLoading","dispatch","useDispatch","useEffect","collectionRef","collection","db","unsubscribeFromCollections","onSnapshot","doc","convertCollectionsSnapshotToMap","className","Suspense","fallback","WithSpinner","path","element"],"sourceRoot":""}