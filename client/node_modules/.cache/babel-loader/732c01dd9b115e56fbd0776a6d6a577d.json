{"ast":null,"code":"var _jsxFileName = \"/Users/twyla/WebDevelopment/crwn-clothing/client/src/components/stripe-checkout-form/StripeCheckout.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useStripe, useElements, PaymentElement } from '@stripe/react-stripe-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CheckoutForm = () => {\n  _s();\n\n  const stripe = useStripe();\n  const elements = useElements();\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const handleSubmit = async event => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const {\n      error\n    } = await stripe.confirmPayment({\n      //`Elements` instance that was used to create the Payment Element\n      elements,\n      confirmParams: {\n        return_url: 'https://example.com/order/123/complete'\n      }\n    });\n\n    if (error) {\n      // This point will only be reached if there is an immediate error when\n      // confirming the payment. Show error to your customer (for example, payment\n      // details incomplete)\n      setErrorMessage(error.message);\n    } else {// Your customer will be redirected to your `return_url`. For some payment\n      // methods like iDEAL, your customer will be redirected to an intermediate\n      // site first to authorize the payment, then redirected to the `return_url`.\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(PaymentElement, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: !stripe,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CheckoutForm, \"h4FiSkOun1ZNv/ijUbXQxJX1xVI=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = CheckoutForm;\nexport default CheckoutForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"sources":["/Users/twyla/WebDevelopment/crwn-clothing/client/src/components/stripe-checkout-form/StripeCheckout.js"],"names":["React","useState","useStripe","useElements","PaymentElement","CheckoutForm","stripe","elements","errorMessage","setErrorMessage","handleSubmit","event","preventDefault","error","confirmPayment","confirmParams","return_url","message"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,SAAR,EAAmBC,WAAnB,EAAgCC,cAAhC,QAAqD,yBAArD;;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AACzB,QAAMC,MAAM,GAAGJ,SAAS,EAAxB;AACA,QAAMK,QAAQ,GAAGJ,WAAW,EAA5B;AAEA,QAAM,CAACK,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,IAAD,CAAhD;;AAEA,QAAMS,YAAY,GAAG,MAAOC,KAAP,IAAiB;AACpC;AACA;AACAA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAI,CAACN,MAAD,IAAW,CAACC,QAAhB,EAA0B;AACxB;AACA;AACA;AACD;;AAED,UAAM;AAACM,MAAAA;AAAD,QAAU,MAAMP,MAAM,CAACQ,cAAP,CAAsB;AAC1C;AACAP,MAAAA,QAF0C;AAG1CQ,MAAAA,aAAa,EAAE;AACbC,QAAAA,UAAU,EAAE;AADC;AAH2B,KAAtB,CAAtB;;AASA,QAAIH,KAAJ,EAAW;AACT;AACA;AACA;AACAJ,MAAAA,eAAe,CAACI,KAAK,CAACI,OAAP,CAAf;AACD,KALD,MAKO,CACL;AACA;AACA;AACD;AACF,GA9BD;;AAgCA,sBACE;AAAM,IAAA,QAAQ,EAAEP,YAAhB;AAAA,4BACE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,QAAQ,EAAE,CAACJ,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,EAIGE,YAAY,iBAAI;AAAA,gBAAMA;AAAN;AAAA;AAAA;AAAA;AAAA,YAJnB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CA9CD;;GAAMH,Y;UACWH,S,EACEC,W;;;KAFbE,Y;AAgDN,eAAeA,YAAf","sourcesContent":["import React, {useState} from 'react';\nimport {useStripe, useElements, PaymentElement} from '@stripe/react-stripe-js';\n\nconst CheckoutForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const handleSubmit = async (event) => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const {error} = await stripe.confirmPayment({\n      //`Elements` instance that was used to create the Payment Element\n      elements,\n      confirmParams: {\n        return_url: 'https://example.com/order/123/complete',\n      },\n    });\n\n\n    if (error) {\n      // This point will only be reached if there is an immediate error when\n      // confirming the payment. Show error to your customer (for example, payment\n      // details incomplete)\n      setErrorMessage(error.message);\n    } else {\n      // Your customer will be redirected to your `return_url`. For some payment\n      // methods like iDEAL, your customer will be redirected to an intermediate\n      // site first to authorize the payment, then redirected to the `return_url`.\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <PaymentElement />\n      <button disabled={!stripe}>Submit</button>\n      {/* Show error message to your customers */}\n      {errorMessage && <div>{errorMessage}</div>}\n    </form>\n  )\n};\n\nexport default CheckoutForm;"]},"metadata":{},"sourceType":"module"}