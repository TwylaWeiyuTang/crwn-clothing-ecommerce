{"ast":null,"code":"var _jsxFileName = \"/Users/twyla/WebDevelopment/crwn-clothing/client/src/components/stripe-checkout-form/StripeCheckout.js\",\n    _s = $RefreshSig$();\n\nimport { useStripe, useElements, PaymentElement } from '@stripe/react-stripe-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst StripeCheckout = () => {\n  _s();\n\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async event => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const result = await stripe.confirmPayment({\n      //`Elements` instance that was used to create the Payment Element\n      elements,\n      confirmParams: {\n        return_url: \"https://example.com/order/123/complete\"\n      }\n    });\n\n    if (result.error) {\n      // Show error to your customer (for example, payment details incomplete)\n      console.log(result.error.message);\n    } else {// Your customer will be redirected to your `return_url`. For some payment\n      // methods like iDEAL, your customer will be redirected to an intermediate\n      // site first to authorize the payment, then redirected to the `return_url`.\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(PaymentElement, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: !stripe,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StripeCheckout, \"EKvoGMX7lxsZ5SGPpYu2aKFzClQ=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = StripeCheckout;\nexport default StripeCheckout;\n\nvar _c;\n\n$RefreshReg$(_c, \"StripeCheckout\");","map":{"version":3,"sources":["/Users/twyla/WebDevelopment/crwn-clothing/client/src/components/stripe-checkout-form/StripeCheckout.js"],"names":["useStripe","useElements","PaymentElement","StripeCheckout","stripe","elements","handleSubmit","event","preventDefault","result","confirmPayment","confirmParams","return_url","error","console","log","message"],"mappings":";;;AAAA,SAAQA,SAAR,EAAmBC,WAAnB,EAAgCC,cAAhC,QAAqD,yBAArD;;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAC3B,QAAMC,MAAM,GAAGJ,SAAS,EAAxB;AACA,QAAMK,QAAQ,GAAGJ,WAAW,EAA5B;;AAEA,QAAMK,YAAY,GAAG,MAAOC,KAAP,IAAiB;AACpC;AACA;AACAA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAI,CAACJ,MAAD,IAAW,CAACC,QAAhB,EAA0B;AACxB;AACA;AACA;AACD;;AAED,UAAMI,MAAM,GAAG,MAAML,MAAM,CAACM,cAAP,CAAsB;AACzC;AACAL,MAAAA,QAFyC;AAGzCM,MAAAA,aAAa,EAAE;AACbC,QAAAA,UAAU,EAAE;AADC;AAH0B,KAAtB,CAArB;;AASA,QAAIH,MAAM,CAACI,KAAX,EAAkB;AAChB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYN,MAAM,CAACI,KAAP,CAAaG,OAAzB;AACD,KAHD,MAGO,CACL;AACA;AACA;AACD;AACF,GA5BD;;AA8BA,sBACE;AAAM,IAAA,QAAQ,EAAEV,YAAhB;AAAA,4BACE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,QAAQ,EAAE,CAACF,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAxCD;;GAAMD,c;UACWH,S,EACEC,W;;;KAFbE,c;AA0CN,eAAeA,cAAf","sourcesContent":["import {useStripe, useElements, PaymentElement} from '@stripe/react-stripe-js';\n\nconst StripeCheckout = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async (event) => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const result = await stripe.confirmPayment({\n      //`Elements` instance that was used to create the Payment Element\n      elements,\n      confirmParams: {\n        return_url: \"https://example.com/order/123/complete\",\n      },\n    });\n\n\n    if (result.error) {\n      // Show error to your customer (for example, payment details incomplete)\n      console.log(result.error.message);\n    } else {\n      // Your customer will be redirected to your `return_url`. For some payment\n      // methods like iDEAL, your customer will be redirected to an intermediate\n      // site first to authorize the payment, then redirected to the `return_url`.\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <PaymentElement />\n      <button disabled={!stripe}>Submit</button>\n    </form>\n  )\n};\n\nexport default StripeCheckout"]},"metadata":{},"sourceType":"module"}