{"ast":null,"code":"import { createSelector } from \"reselect\";\nimport memoize from 'lodash.memoize';\n\nconst selectShop = state => state.shop;\n\nexport const selectCollections = createSelector([selectShop], shop => shop.collections);\nexport const selectCollectionsForPreview = createSelector([selectCollections], collections => collections ? Object.keys(collections).map(key => collections[key]) : [] // .keys() gives us all of the keys of an object in an array format\n// this is try to get all the values of that key in our object\n);\nexport const selectCollection = memoize(collectionUrlParam => // collectionUrlParam is a dynamic argument, which means it can change\n// so to memoize selectCollection, we actually have to memoize the whole function using a \n// memoize helper function\ncreateSelector([selectCollections], collections => collections ? collections[collectionUrlParam] : null));\nexport const selectIsCollectionFetching = createSelector([selectShop], shop => shop.isFetching);","map":{"version":3,"sources":["/Users/twyla/WebDevelopment/crwn-clothing/src/redux/shop/shopSelectors.js"],"names":["createSelector","memoize","selectShop","state","shop","selectCollections","collections","selectCollectionsForPreview","Object","keys","map","key","selectCollection","collectionUrlParam","selectIsCollectionFetching","isFetching"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA,OAAOC,OAAP,MAAoB,gBAApB;;AAEA,MAAMC,UAAU,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAlC;;AAEA,OAAO,MAAMC,iBAAiB,GAAGL,cAAc,CAC3C,CAACE,UAAD,CAD2C,EAE3CE,IAAI,IAAIA,IAAI,CAACE,WAF8B,CAAxC;AAKP,OAAO,MAAMC,2BAA2B,GAAGP,cAAc,CACrD,CAACK,iBAAD,CADqD,EAEpDC,WAAD,IAAiBA,WAAW,GAAGE,MAAM,CAACC,IAAP,CAAYH,WAAZ,EAAyBI,GAAzB,CAA8BC,GAAD,IAASL,WAAW,CAACK,GAAD,CAAjD,CAAH,GAA6D,EAFpC,CAGrD;AACA;AAJqD,CAAlD;AAOP,OAAO,MAAMC,gBAAgB,GAAGX,OAAO,CAAEY,kBAAD,IACpC;AACA;AACA;AACAb,cAAc,CACV,CAACK,iBAAD,CADU,EAEVC,WAAW,IAAKA,WAAW,GAAGA,WAAW,CAACO,kBAAD,CAAd,GAAqC,IAFtD,CAJqB,CAAhC;AASP,OAAO,MAAMC,0BAA0B,GAAGd,cAAc,CACpD,CAACE,UAAD,CADoD,EAEpDE,IAAI,IAAIA,IAAI,CAACW,UAFuC,CAAjD","sourcesContent":["import { createSelector } from \"reselect\";\nimport memoize from 'lodash.memoize'\n\nconst selectShop = state => state.shop\n\nexport const selectCollections = createSelector(\n    [selectShop],\n    shop => shop.collections\n)\n\nexport const selectCollectionsForPreview = createSelector(\n    [selectCollections],\n    (collections) => collections ? Object.keys(collections).map((key) => collections[key]) : []\n    // .keys() gives us all of the keys of an object in an array format\n    // this is try to get all the values of that key in our object\n)\n\nexport const selectCollection = memoize((collectionUrlParam) => \n    // collectionUrlParam is a dynamic argument, which means it can change\n    // so to memoize selectCollection, we actually have to memoize the whole function using a \n    // memoize helper function\n    createSelector(\n        [selectCollections],\n        collections => (collections ? collections[collectionUrlParam] : null)\n    ))\n\nexport const selectIsCollectionFetching = createSelector(\n    [selectShop],\n    shop => shop.isFetching\n)"]},"metadata":{},"sourceType":"module"}