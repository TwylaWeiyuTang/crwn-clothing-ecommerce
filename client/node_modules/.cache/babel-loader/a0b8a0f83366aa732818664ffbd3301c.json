{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { collection, getFirestore, query, writeBatch } from \"firebase/firestore\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport { doc, getDoc, setDoc } from \"firebase/firestore\"; // TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBjxpRqN3ixOjwZ7KXfRyoiJXj_hZPHoI4\",\n  authDomain: \"crwn-db-f5260.firebaseapp.com\",\n  projectId: \"crwn-db-f5260\",\n  storageBucket: \"crwn-db-f5260.appspot.com\",\n  messagingSenderId: \"527934674908\",\n  appId: \"1:527934674908:web:54e66f9087dd8cbb33a119\",\n  measurementId: \"G-73LN0WZTYJ\"\n};\n\nconst firebase = require(\"firebase\");\n\nrequire(\"firebase/firestore\"); // Initialize Firebase\n\n\nconst app = initializeApp(firebaseConfig); // Initialize Cloud Firestore through Firebase\n\nconst db = getFirestore(app);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return; // if there is no userAuth (user is not signed in), return nothing\n\n  const docRef = doc(db, `users/${userAuth.uid}`);\n  const docSnap = await getDoc(docRef);\n\n  if (!docSnap.exists()) {\n    // if the user id does not exist in our database, then we create one \n    // document for that relative user\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date(); // the first time the user logged in\n\n    try {\n      await setDoc(docRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return docRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = collection(db, collectionKey);\n  const batch = writeBatch(db); // execute multiple write operations as a single batch\n  // so if the write successful, it means all the documents are added, if it fails, then \n  // everything fails together\n\n  objectsToAdd.forEach(obj => {\n    const newDocRef = doc(db, collectionRef);\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n}; // create a new collection by passing in an relevant key and objects for the key\n\nconst provider = new GoogleAuthProvider();\nexport const auth = getAuth();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => signInWithPopup(auth, provider); //  prompt users to sign in with their Google Accounts by opening a pop-up window","map":{"version":3,"sources":["/Users/twyla/WebDevelopment/crwn-clothing/src/firebase/firebaseUtils.js"],"names":["initializeApp","collection","getFirestore","query","writeBatch","getAuth","signInWithPopup","GoogleAuthProvider","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","require","app","db","createUserProfileDocument","userAuth","additionalData","docRef","uid","docSnap","exists","displayName","email","createdAt","Date","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","batch","forEach","obj","newDocRef","set","commit","provider","auth","setCustomParameters","prompt","signInWithGoogle"],"mappings":"AAAA;AACA,SAASA,aAAT,QAA8B,cAA9B;AACA,SAASC,UAAT,EAAqBC,YAArB,EAAmCC,KAAnC,EAA0CC,UAA1C,QAA4D,oBAA5D;AACA,SAASC,OAAT,EAAkBC,eAAlB,EAAmCC,kBAAnC,QAA6D,eAA7D;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,MAAtB,QAAoC,oBAApC,C,CACA;AACA;AAEA;AACA;;AACA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,yCADa;AAErBC,EAAAA,UAAU,EAAE,+BAFS;AAGrBC,EAAAA,SAAS,EAAE,eAHU;AAIrBC,EAAAA,aAAa,EAAE,2BAJM;AAKrBC,EAAAA,iBAAiB,EAAE,cALE;AAMrBC,EAAAA,KAAK,EAAE,2CANc;AAOrBC,EAAAA,aAAa,EAAE;AAPM,CAAvB;;AAUA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACAA,OAAO,CAAC,oBAAD,CAAP,C,CACA;;;AACA,MAAMC,GAAG,GAAGrB,aAAa,CAACW,cAAD,CAAzB,C,CAEA;;AACA,MAAMW,EAAE,GAAGpB,YAAY,CAACmB,GAAD,CAAvB;AAEA,OAAO,MAAME,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AACzE,MAAI,CAACD,QAAL,EAAe,OAD0D,CAClD;;AAEvB,QAAME,MAAM,GAAGlB,GAAG,CAACc,EAAD,EAAM,SAAQE,QAAQ,CAACG,GAAI,EAA3B,CAAlB;AACA,QAAMC,OAAO,GAAG,MAAMnB,MAAM,CAACiB,MAAD,CAA5B;;AAEA,MAAI,CAACE,OAAO,CAACC,MAAR,EAAL,EAAuB;AAAE;AACrB;AACA,UAAM;AAACC,MAAAA,WAAD;AAAcC,MAAAA;AAAd,QAAuBP,QAA7B;AACA,UAAMQ,SAAS,GAAG,IAAIC,IAAJ,EAAlB,CAHmB,CAGU;;AAE7B,QAAI;AACA,YAAMvB,MAAM,CAACgB,MAAD,EAAS;AACjBI,QAAAA,WADiB;AAEjBC,QAAAA,KAFiB;AAGjBC,QAAAA,SAHiB;AAIjB,WAAGP;AAJc,OAAT,CAAZ;AAMH,KAPD,CAOE,OAAOS,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACH;AACJ;;AAED,SAAOX,MAAP;AACH,CAxBM;AA0BP,OAAO,MAAMY,yBAAyB,GAAG,OAAOC,aAAP,EAAsBC,YAAtB,KAAuC;AAC5E,QAAMC,aAAa,GAAGxC,UAAU,CAACqB,EAAD,EAAKiB,aAAL,CAAhC;AAEA,QAAMG,KAAK,GAAGtC,UAAU,CAACkB,EAAD,CAAxB,CAH4E,CAG/C;AAC7B;AACA;;AAEAkB,EAAAA,YAAY,CAACG,OAAb,CAAqBC,GAAG,IAAI;AACxB,UAAMC,SAAS,GAAGrC,GAAG,CAACc,EAAD,EAAKmB,aAAL,CAArB;AACAC,IAAAA,KAAK,CAACI,GAAN,CAAUD,SAAV,EAAqBD,GAArB;AACH,GAHD;AAKA,SAAO,MAAMF,KAAK,CAACK,MAAN,EAAb;AACH,CAbM,C,CAaL;;AAEF,MAAMC,QAAQ,GAAG,IAAIzC,kBAAJ,EAAjB;AACA,OAAO,MAAM0C,IAAI,GAAG5C,OAAO,EAApB;AAEP2C,QAAQ,CAACE,mBAAT,CAA6B;AAACC,EAAAA,MAAM,EAAE;AAAT,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAM9C,eAAe,CAAC2C,IAAD,EAAOD,QAAP,CAA9C,C,CACP","sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { collection, getFirestore, query, writeBatch } from \"firebase/firestore\"\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport { doc, getDoc, setDoc } from \"firebase/firestore\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBjxpRqN3ixOjwZ7KXfRyoiJXj_hZPHoI4\",\n  authDomain: \"crwn-db-f5260.firebaseapp.com\",\n  projectId: \"crwn-db-f5260\",\n  storageBucket: \"crwn-db-f5260.appspot.com\",\n  messagingSenderId: \"527934674908\",\n  appId: \"1:527934674908:web:54e66f9087dd8cbb33a119\",\n  measurementId: \"G-73LN0WZTYJ\"\n};\n\nconst firebase = require(\"firebase\");\nrequire(\"firebase/firestore\");\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Initialize Cloud Firestore through Firebase\nconst db = getFirestore(app);\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n    if (!userAuth) return; // if there is no userAuth (user is not signed in), return nothing\n\n    const docRef = doc(db, `users/${userAuth.uid}`);\n    const docSnap = await getDoc(docRef);\n\n    if (!docSnap.exists()) { // if the user id does not exist in our database, then we create one \n        // document for that relative user\n        const {displayName, email} = userAuth\n        const createdAt = new Date() // the first time the user logged in\n\n        try {\n            await setDoc(docRef, {\n                displayName,\n                email,\n                createdAt,\n                ...additionalData\n            })\n        } catch (error) {\n            console.log('error creating user', error.message)\n        }\n    }\n\n    return docRef\n}\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n    const collectionRef = collection(db, collectionKey)\n\n    const batch = writeBatch(db) // execute multiple write operations as a single batch\n    // so if the write successful, it means all the documents are added, if it fails, then \n    // everything fails together\n\n    objectsToAdd.forEach(obj => {\n        const newDocRef = doc(db, collectionRef)\n        batch.set(newDocRef, obj)\n    })\n\n    return await batch.commit()\n} // create a new collection by passing in an relevant key and objects for the key\n\nconst provider = new GoogleAuthProvider();\nexport const auth = getAuth();\n\nprovider.setCustomParameters({prompt: 'select_account'});\nexport const signInWithGoogle = () => signInWithPopup(auth, provider);\n//  prompt users to sign in with their Google Accounts by opening a pop-up window "]},"metadata":{},"sourceType":"module"}