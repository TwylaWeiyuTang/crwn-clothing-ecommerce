{"ast":null,"code":"var _jsxFileName = \"/Users/twyla/WebDevelopment/crwn-clothing/src/pages/shoppage/ShopComponent.js\";\nimport React from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport CollectionsOverview from '../../components/collections-overview/CollectionsOverview';\nimport CollectionComponent from '../collections/CollectionPageComponent';\nimport { db, convertCollectionsSnapshotToMap } from '../../firebase/firebaseUtils';\nimport { onSnapshot, collection } from 'firebase/firestore';\nimport { connect } from 'react-redux';\nimport { updateCollections } from '../../redux/shop/shopActions';\nimport WithSpinner from '../../components/with-spinner/WithSpinner';\nimport { fetchCollectionsStartAsync } from '../../redux/shop/shopActions';\nimport { createStructuredSelector } from 'reselect';\nimport { selectIsCollectionFetching } from '../../redux/shop/shopSelectors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ShopComponent extends React.Component {\n  // state = {\n  //     loading: true\n  // } // this is the same as writing constructor\n  // unsubscribeFromSnapshot = null // the snapshot is going to be the represent of our collections\n  // // data from firestore\n  componentDidMount() {\n    const {\n      fetchCollectionsStartAsync\n    } = this.props;\n    fetchCollectionsStartAsync(); // const {updateCollections} = this.props\n    // const collectionRef = collection(db, 'collections')\n    // fetch('https://firestore.googleapis.com/v1/projects/crwn-db-f5260/databases/(default)/documents/collections'\n    // ).then(response => response.json())\n    // .then(collections => console.log(collections))\n    // this.unsubscribeFromSnapshot = onSnapshot(collectionRef, async (doc) => {\n    //     const collectionsMap = convertCollectionsSnapshotToMap(doc)\n    //     updateCollections(collectionsMap)\n    //     this.setState({loading: false})\n    // })\n  }\n\n  render() {\n    const {\n      isCollectionFetching\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shop-page\",\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: isCollectionFetching ? /*#__PURE__*/_jsxDEV(WithSpinner, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 67\n          }, this) : /*#__PURE__*/_jsxDEV(CollectionsOverview, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 86\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \":collectionId\",\n          element: isCollectionFetching ? /*#__PURE__*/_jsxDEV(WithSpinner, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 78\n          }, this) : /*#__PURE__*/_jsxDEV(CollectionComponent, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 98\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopComponent);","map":{"version":3,"sources":["/Users/twyla/WebDevelopment/crwn-clothing/src/pages/shoppage/ShopComponent.js"],"names":["React","Routes","Route","CollectionsOverview","CollectionComponent","db","convertCollectionsSnapshotToMap","onSnapshot","collection","connect","updateCollections","WithSpinner","fetchCollectionsStartAsync","createStructuredSelector","selectIsCollectionFetching","ShopComponent","Component","componentDidMount","props","render","isCollectionFetching","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,kBAA9B;AACA,OAAOC,mBAAP,MAAgC,2DAAhC;AACA,OAAOC,mBAAP,MAAgC,wCAAhC;AACA,SAASC,EAAT,EAAaC,+BAAb,QAAoD,8BAApD;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,oBAAvC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,OAAOC,WAAP,MAAwB,2CAAxB;AACA,SAASC,0BAAT,QAA2C,8BAA3C;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,0BAAT,QAA2C,gCAA3C;;;AAEA,MAAMC,aAAN,SAA4Bf,KAAK,CAACgB,SAAlC,CAA4C;AACxC;AACA;AACA;AAEA;AACA;AAEAC,EAAAA,iBAAiB,GAAG;AAChB,UAAM;AAACL,MAAAA;AAAD,QAA+B,KAAKM,KAA1C;AACAN,IAAAA,0BAA0B,GAFV,CAGhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AACDO,EAAAA,MAAM,GAAI;AACN,UAAM;AAACC,MAAAA;AAAD,QAAyB,KAAKF,KAApC;AACA,wBACA;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACI,QAAC,MAAD;AAAA,gCACI,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,GAAZ;AAAgB,UAAA,OAAO,EAAIE,oBAAoB,gBAAG,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,kBAAH,gBAAsB,QAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAArE;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,eAAZ;AAA4B,UAAA,OAAO,EAAEA,oBAAoB,gBAAI,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,kBAAJ,gBAAwB,QAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAjF;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADA;AAWH;;AAnCuC;;AAsC5C,MAAMC,eAAe,GAAGR,wBAAwB,CAAC;AAC7CO,EAAAA,oBAAoB,EAAEN;AADuB,CAAD,CAAhD;;AAIA,MAAMQ,kBAAkB,GAAGC,QAAQ,KAAK;AACpCX,EAAAA,0BAA0B,EAAE,MAAMW,QAAQ,CAACX,0BAA0B,EAA3B;AADN,CAAL,CAAnC;;AAIA,eAAeH,OAAO,CAAEY,eAAF,EAAmBC,kBAAnB,CAAP,CAA+CP,aAA/C,CAAf","sourcesContent":["import React from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport CollectionsOverview from '../../components/collections-overview/CollectionsOverview';\nimport CollectionComponent from '../collections/CollectionPageComponent';\nimport { db, convertCollectionsSnapshotToMap } from '../../firebase/firebaseUtils';\nimport { onSnapshot, collection } from 'firebase/firestore';\nimport { connect } from 'react-redux';\nimport { updateCollections } from '../../redux/shop/shopActions';\nimport WithSpinner from '../../components/with-spinner/WithSpinner';\nimport { fetchCollectionsStartAsync } from '../../redux/shop/shopActions';\nimport { createStructuredSelector } from 'reselect';\nimport { selectIsCollectionFetching } from '../../redux/shop/shopSelectors';\n\nclass ShopComponent extends React.Component {\n    // state = {\n    //     loading: true\n    // } // this is the same as writing constructor\n\n    // unsubscribeFromSnapshot = null // the snapshot is going to be the represent of our collections\n    // // data from firestore\n\n    componentDidMount() {\n        const {fetchCollectionsStartAsync} = this.props\n        fetchCollectionsStartAsync()\n        // const {updateCollections} = this.props\n        // const collectionRef = collection(db, 'collections')\n        // fetch('https://firestore.googleapis.com/v1/projects/crwn-db-f5260/databases/(default)/documents/collections'\n        // ).then(response => response.json())\n        // .then(collections => console.log(collections))\n        // this.unsubscribeFromSnapshot = onSnapshot(collectionRef, async (doc) => {\n        //     const collectionsMap = convertCollectionsSnapshotToMap(doc)\n        //     updateCollections(collectionsMap)\n        //     this.setState({loading: false})\n        // })\n    }\n    render () {\n        const {isCollectionFetching} = this.props\n        return (\n        <div className='shop-page'>\n            <Routes>\n                <Route path='/' element = {isCollectionFetching? (<WithSpinner />): (<CollectionsOverview />)} />\n                {/* since we are in shop component, React router already knows we are in /shop router,\n                so we just need to use '/' to specify the route we are in now */}\n                <Route path=':collectionId' element={isCollectionFetching ? (<WithSpinner />) : (<CollectionComponent />)} />\n                {/* this is like '/shop/:collectionId */}\n            </Routes>\n        </div>\n        )\n    }\n}\n\nconst mapStateToProps = createStructuredSelector({\n    isCollectionFetching: selectIsCollectionFetching\n})\n\nconst mapDispatchToProps = dispatch => ({\n    fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n})\n\nexport default connect (mapStateToProps, mapDispatchToProps) (ShopComponent)"]},"metadata":{},"sourceType":"module"}