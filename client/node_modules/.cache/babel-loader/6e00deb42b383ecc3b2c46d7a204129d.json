{"ast":null,"code":"var _jsxFileName = \"/Users/twyla/WebDevelopment/crwn-clothing/src/components/cart-dropdown/CartDropdown.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { useNavigate } from 'react-router-dom';\nimport CustomButtonComponent from '../custom-button/CustomButtonComponent';\nimport CartItemComponent from '../cart-item/CartItemComponent';\nimport { selectCartItems } from '../../redux/cart/cartSelectors';\nimport { toggleCartHidden } from '../../redux/cart/cartActions';\nimport './cartDropdownStyle.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CartDropdown = _ref => {\n  _s();\n\n  let {\n    cartItems,\n    dispatch\n  } = _ref;\n  const history = useNavigate();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cart-dropdown\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cart-items\",\n      children: cartItems.length ? cartItems.map(cartItem => /*#__PURE__*/_jsxDEV(CartItemComponent, {\n        item: cartItem\n      }, cartItem.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 15\n      }, this)) // if cartitems has length, which means there is item in the cart\n      : /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"empty-message\",\n        children: \"Your cart is empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 14\n      }, this) // if there is no length, then the cart is empty\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CustomButtonComponent, {\n      onClick: () => {\n        history('/checkout');\n        dispatch(toggleCartHidden()); // this will toggle the cart icon again, so the cart\n        // dropdown will be closed automatically while we being redirected to checkout page\n      },\n      children: \"GO TO CHECKOUT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartDropdown, \"UuBpJaL/77ixlr0CeL0xEoy8mog=\", false, function () {\n  return [useNavigate];\n});\n\n_c = CartDropdown;\nconst mapStateToProps = createStructuredSelector({\n  // pull off cart state from root reducer\n  cartItems: selectCartItems\n});\nexport default connect(mapStateToProps)(CartDropdown);\n\nvar _c;\n\n$RefreshReg$(_c, \"CartDropdown\");","map":{"version":3,"sources":["/Users/twyla/WebDevelopment/crwn-clothing/src/components/cart-dropdown/CartDropdown.js"],"names":["React","connect","createStructuredSelector","useNavigate","CustomButtonComponent","CartItemComponent","selectCartItems","toggleCartHidden","CartDropdown","cartItems","dispatch","history","length","map","cartItem","id","mapStateToProps"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,qBAAP,MAAkC,wCAAlC;AACA,OAAOC,iBAAP,MAA8B,gCAA9B;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AAEA,OAAO,0BAAP;;;AAEA,MAAMC,YAAY,GAAG,QAA2B;AAAA;;AAAA,MAA1B;AAACC,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,GAA0B;AAC9C,QAAMC,OAAO,GAAGR,WAAW,EAA3B;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,gBAEIM,SAAS,CAACG,MAAV,GACAH,SAAS,CAACI,GAAV,CAAcC,QAAQ,iBACpB,QAAC,iBAAD;AAAqC,QAAA,IAAI,EAAIA;AAA7C,SAAwBA,QAAQ,CAACC,EAAjC;AAAA;AAAA;AAAA;AAAA,cADF,CADA,CAGC;AAHD,qBAKC;AAAM,QAAA,SAAS,EAAC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPL,CAQI;;AARJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAYI,QAAC,qBAAD;AAAuB,MAAA,OAAO,EAAE,MAAM;AACpCJ,QAAAA,OAAO,CAAC,WAAD,CAAP;AACAD,QAAAA,QAAQ,CAACH,gBAAgB,EAAjB,CAAR,CAFoC,CAEP;AAC7B;AACD,OAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CAvBD;;GAAMC,Y;UACYL,W;;;KADZK,Y;AAyBN,MAAMQ,eAAe,GAAGd,wBAAwB,CAAE;AAAE;AAClDO,EAAAA,SAAS,EAAEH;AADqC,CAAF,CAAhD;AAIA,eAAeL,OAAO,CAAEe,eAAF,CAAP,CAA2BR,YAA3B,CAAf","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport { createStructuredSelector } from 'reselect'\nimport { useNavigate } from 'react-router-dom';\nimport CustomButtonComponent from '../custom-button/CustomButtonComponent'\nimport CartItemComponent from '../cart-item/CartItemComponent'\nimport { selectCartItems } from '../../redux/cart/cartSelectors'\nimport { toggleCartHidden } from '../../redux/cart/cartActions';\n\nimport './cartDropdownStyle.scss'\n\nconst CartDropdown = ({cartItems, dispatch}) => {\n  const history = useNavigate();\n\n  return (\n    <div className='cart-dropdown'>\n        <div className='cart-items'>\n          {\n            cartItems.length ?(\n            cartItems.map(cartItem => \n             (<CartItemComponent key={cartItem.id} item = {cartItem} />)))\n             // if cartitems has length, which means there is item in the cart\n            :\n            (<span className='empty-message'>Your cart is empty</span>)\n            // if there is no length, then the cart is empty\n            }\n        </div>\n        <CustomButtonComponent onClick={() => {\n          history('/checkout');\n          dispatch(toggleCartHidden()) // this will toggle the cart icon again, so the cart\n          // dropdown will be closed automatically while we being redirected to checkout page\n        }}>GO TO CHECKOUT</CustomButtonComponent>\n    </div>\n  )\n}\n\nconst mapStateToProps = createStructuredSelector ({ // pull off cart state from root reducer\n  cartItems: selectCartItems\n})\n\nexport default connect (mapStateToProps) (CartDropdown)"]},"metadata":{},"sourceType":"module"}