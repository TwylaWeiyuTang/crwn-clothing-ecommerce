{"ast":null,"code":"var _jsxFileName = \"/Users/twyla/WebDevelopment/crwn-clothing/client/src/components/stripe-button/StripeButton.js\",\n    _s = $RefreshSig$();\n\nimport { Elements } from \"@stripe/react-stripe-js\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport axios from 'axios';\nimport PaymentForm from \"../stripe-checkout-form/StripeCheckout\";\nimport { selectCartTotal } from \"../../redux/cart/cartSelectors\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PUBLIC_KEY = \"pk_test_51KksksENpvpK9J8psPLe7fxjiNMjwNLM7GxWowCDdDm1XTaFSs8LKrK1Fef5nFLKOa8SSMVsRJ6a1kQXt7HrAsse00qgExWD6S\";\nconst stripeTestPromise = loadStripe(PUBLIC_KEY);\nexport default function StripeContainer() {\n  _s();\n\n  const total = useSelector(selectCartTotal);\n  const [clientSecret, setClientSecret] = useState('');\n  useEffect(() => {\n    const fetchClientSecret = async () => {\n      const data = await axios.post('/payment', {\n        amount: total\n      });\n      setClientSecret(data.data.clientSecret);\n    };\n\n    fetchClientSecret();\n  }, []);\n  const options = {\n    // passing the client secret obtained from the server\n    clientSecret: clientSecret\n  };\n  return /*#__PURE__*/_jsxDEV(Elements, {\n    stripe: stripeTestPromise,\n    options: options,\n    children: /*#__PURE__*/_jsxDEV(PaymentForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 3\n  }, this);\n}\n\n_s(StripeContainer, \"uDhrNgj7zUya5ijeUOMVEnLACtM=\", false, function () {\n  return [useSelector];\n});\n\n_c = StripeContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"StripeContainer\");","map":{"version":3,"sources":["/Users/twyla/WebDevelopment/crwn-clothing/client/src/components/stripe-button/StripeButton.js"],"names":["Elements","loadStripe","React","useState","useEffect","useSelector","axios","PaymentForm","selectCartTotal","PUBLIC_KEY","stripeTestPromise","StripeContainer","total","clientSecret","setClientSecret","fetchClientSecret","data","post","amount","options"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,yBAAzB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,OAAOC,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,wCAAxB;AACA,SAASC,eAAT,QAAgC,gCAAhC;;AAEA,MAAMC,UAAU,GAAG,6GAAnB;AAEA,MAAMC,iBAAiB,GAAGT,UAAU,CAACQ,UAAD,CAApC;AAEA,eAAe,SAASE,eAAT,GAA2B;AAAA;;AACxC,QAAMC,KAAK,GAAGP,WAAW,CAACG,eAAD,CAAzB;AACA,QAAM,CAACK,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,EAAD,CAAhD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,iBAAiB,GAAG,YAAY;AACpC,YAAMC,IAAI,GAAG,MAAMV,KAAK,CAACW,IAAN,CAAW,UAAX,EAAuB;AACxCC,QAAAA,MAAM,EAAEN;AADgC,OAAvB,CAAnB;AAGAE,MAAAA,eAAe,CAACE,IAAI,CAACA,IAAL,CAAUH,YAAX,CAAf;AACD,KALD;;AAMAE,IAAAA,iBAAiB;AAClB,GARQ,EAQN,EARM,CAAT;AASA,QAAMI,OAAO,GAAG;AACd;AACAN,IAAAA,YAAY,EAAEA;AAFA,GAAhB;AAID,sBACC,QAAC,QAAD;AAAU,IAAA,MAAM,EAAEH,iBAAlB;AAAqC,IAAA,OAAO,EAAES,OAA9C;AAAA,2BACC,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAKA;;GAtBuBR,e;UACRN,W;;;KADQM,e","sourcesContent":["import { Elements } from \"@stripe/react-stripe-js\"\nimport { loadStripe } from \"@stripe/stripe-js\"\nimport React, {useState, useEffect} from \"react\"\nimport { useSelector } from \"react-redux\"\nimport axios from 'axios'\nimport PaymentForm from \"../stripe-checkout-form/StripeCheckout\"\nimport { selectCartTotal } from \"../../redux/cart/cartSelectors\"\n\nconst PUBLIC_KEY = \"pk_test_51KksksENpvpK9J8psPLe7fxjiNMjwNLM7GxWowCDdDm1XTaFSs8LKrK1Fef5nFLKOa8SSMVsRJ6a1kQXt7HrAsse00qgExWD6S\"\n\nconst stripeTestPromise = loadStripe(PUBLIC_KEY)\n\nexport default function StripeContainer() {\n  const total = useSelector(selectCartTotal)\n  const [clientSecret, setClientSecret] = useState('')\n\n  useEffect(() => {\n    const fetchClientSecret = async () => {\n      const data = await axios.post('/payment', {\n        amount: total\n      })\n      setClientSecret(data.data.clientSecret)\n    }\n    fetchClientSecret()\n  }, [])\n  const options = {\n    // passing the client secret obtained from the server\n    clientSecret: clientSecret,\n  };\n\treturn (\n\t\t<Elements stripe={stripeTestPromise} options={options}>\n\t\t\t<PaymentForm />\n\t\t</Elements>\n\t)\n}"]},"metadata":{},"sourceType":"module"}