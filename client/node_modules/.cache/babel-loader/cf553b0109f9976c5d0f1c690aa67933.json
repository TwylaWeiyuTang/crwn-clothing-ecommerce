{"ast":null,"code":"import ShopActionTypes from \"./shopTypes\";\nimport firebase from \"firebase/compact/app\";\nimport \"firebase/firestore\";\nimport { convertCollectionsSnapshotToMap } from \"../../firebase/firebaseUtils\";\nconst db = firebase.firestore();\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n});\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap\n});\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n});\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    const collectionRef = db.collection('collections');\n    dispatch(fetchCollectionsStart());\n    collectionRef.get().then(snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      dispatch(fetchCollectionsSuccess(collectionsMap)); // once this asynchronous call resolves, we are going to dispatch this collectionsMap \n      // to fetchCollectionsSuccess function action\n    }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n  };\n}; // we are utilising redux-thunk to dispatch function as action instead of an object\n// and redux-thunk allows us to dispatch multiple actions in the same aynschronous call","map":{"version":3,"sources":["/Users/twyla/WebDevelopment/crwn-clothing/src/redux/shop/shopActions.js"],"names":["ShopActionTypes","firebase","convertCollectionsSnapshotToMap","db","firestore","fetchCollectionsStart","type","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","collectionsMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsFailure","errorMessage","FETCH_COLLECTIONS_FAILURE","fetchCollectionsStartAsync","dispatch","collectionRef","collection","get","then","snapshot","catch","error","message"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,aAA5B;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAO,oBAAP;AACA,SAASC,+BAAT,QAAgD,8BAAhD;AAEA,MAAMC,EAAE,GAAGF,QAAQ,CAACG,SAAT,EAAX;AAEA,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AACxCC,EAAAA,IAAI,EAAEN,eAAe,CAACO;AADkB,CAAP,CAA9B;AAIP,OAAO,MAAMC,uBAAuB,GAAGC,cAAc,KAAK;AACtDH,EAAAA,IAAI,EAACN,eAAe,CAACU,yBADiC;AAEtDC,EAAAA,OAAO,EAAEF;AAF6C,CAAL,CAA9C;AAKP,OAAO,MAAMG,uBAAuB,GAAGC,YAAY,KAAK;AACpDP,EAAAA,IAAI,EAAEN,eAAe,CAACc,yBAD8B;AAEpDH,EAAAA,OAAO,EAAEE;AAF2C,CAAL,CAA5C;AAKP,OAAO,MAAME,0BAA0B,GAAG,MAAM;AAC5C,SAAOC,QAAQ,IAAI;AACf,UAAMC,aAAa,GAAGd,EAAE,CAACe,UAAH,CAAc,aAAd,CAAtB;AACAF,IAAAA,QAAQ,CAACX,qBAAqB,EAAtB,CAAR;AACAY,IAAAA,aAAa,CAACE,GAAd,GAAoBC,IAApB,CAAyBC,QAAQ,IAAI;AACjC,YAAMZ,cAAc,GAAGP,+BAA+B,CAACmB,QAAD,CAAtD;AACAL,MAAAA,QAAQ,CAACR,uBAAuB,CAACC,cAAD,CAAxB,CAAR,CAFiC,CAGrC;AACA;AACC,KALD,EAKGa,KALH,CAKSC,KAAK,IAAIP,QAAQ,CAACJ,uBAAuB,CAACW,KAAK,CAACC,OAAP,CAAxB,CAL1B;AAMH,GATD;AAUH,CAXM,C,CAWL;AACF","sourcesContent":["import ShopActionTypes from \"./shopTypes\";\nimport firebase from \"firebase/compact/app\";\nimport \"firebase/firestore\";\nimport { convertCollectionsSnapshotToMap } from \"../../firebase/firebaseUtils\";\n\nconst db = firebase.firestore();\n\nexport const fetchCollectionsStart = () => ({\n    type: ShopActionTypes.FETCH_COLLECTIONS_START\n})\n\nexport const fetchCollectionsSuccess = collectionsMap => ({\n    type:ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n    payload: collectionsMap\n})\n\nexport const fetchCollectionsFailure = errorMessage => ({\n    type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n    payload: errorMessage\n})\n\nexport const fetchCollectionsStartAsync = () => {\n    return dispatch => {\n        const collectionRef = db.collection('collections')\n        dispatch(fetchCollectionsStart())\n        collectionRef.get().then(snapshot => {\n            const collectionsMap = convertCollectionsSnapshotToMap(snapshot)\n            dispatch(fetchCollectionsSuccess(collectionsMap))\n        // once this asynchronous call resolves, we are going to dispatch this collectionsMap \n        // to fetchCollectionsSuccess function action\n        }).catch(error => dispatch(fetchCollectionsFailure(error.message)))\n    }\n} // we are utilising redux-thunk to dispatch function as action instead of an object\n// and redux-thunk allows us to dispatch multiple actions in the same aynschronous call"]},"metadata":{},"sourceType":"module"}